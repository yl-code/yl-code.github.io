<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据类型</title>
    <url>/2020/06/23/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li>Variables are used to store information to be referenced and manipulated in a computer program.</li>
<li>They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves.</li>
<li>It is helpful to think of variables as containers that hold information.</li>
<li>Their sole purpose is to label and store data in memory.</li>
<li>This data can then be used throughout your program.</li>
</ul>
<h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><ul>
<li>name = “Silence”</li>
<li>此行代码声明了一个变量，变量名为: name，变量 name 的值为: “Silence”</li>
</ul>
<h3 id="变量定义的规则"><a href="#变量定义的规则" class="headerlink" title="变量定义的规则"></a>变量定义的规则</h3><ul>
<li><p>变量名只能是字母、数字或下划线的任意组合，但是变量名的第一个字符不能是数字</p>
</li>
<li><p>标识符名称是对大小写敏感的。</p>
<ul>
<li>例如， myname 和 myName 不是一个标识符</li>
<li>注意前者中的小写 n 和后者中的大写 N</li>
</ul>
</li>
<li><p>以下关键字不能声明为变量名</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>,</span><br><span class="line">    <span class="string">'except'</span>, <span class="string">'exec'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>,</span><br><span class="line">    <span class="string">'lambda'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'print'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>,</span><br><span class="line">    <span class="string">'yield'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"big-frontend"</span></span><br><span class="line">name2 = name</span><br><span class="line">print(name, name2)</span><br></pre></td></tr></table></figure>

<p>#</p>
]]></content>
  </entry>
  <entry>
    <title>Python 简介</title>
    <url>/2020/06/23/Python%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h4 id="博客园地址"><a href="#博客园地址" class="headerlink" title="博客园地址"></a><a href="https://www.cnblogs.com/Andy0827/" target="_blank" rel="noopener">博客园地址</a></h4><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>Python 的创始人为吉多·范罗苏姆（Guido van Rossum）。</li>
<li>1989 年的圣诞节期间，吉多·范罗苏姆在阿姆斯特丹为了打发时间，决心开发一个新的脚本解释程序，作为 ABC 语言的一种继承。</li>
<li>Python 语言是少有的一种可以称得上，即简单又功能强大的编程语言。</li>
<li>你将惊喜地发现 Python 语言是多么地简单，它注重的是如何解决问题而不是编程语言的语法和结构。</li>
<li>Python 是一种简单易学，功能强大的编程语言，它有高效率的高层数据结构，简单而有效地实现面向对象编程。</li>
<li>Python 简洁的语法和对动态输入的支持，再加上解释性语言的本质，使得它在大多数平台上的许多领域都是一个理想的脚本语言，特别适用于快速的应用程序开发。</li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><h2 id="简单易学"><a href="#简单易学" class="headerlink" title="简单易学"></a>简单易学</h2><ul>
<li>Python 是一种代表简单主义思想的语言。</li>
<li>阅读一个良好的 Python 程序就感觉像是在读英语一样，尽管这个英语的要求非常严格！</li>
<li>Python 的这种伪代码本质是它最大的优点之一。</li>
<li>它使你能够专注于解决问题而不是去搞明白语言本身。</li>
</ul>
<h2 id="免费开源"><a href="#免费开源" class="headerlink" title="免费开源"></a>免费开源</h2><ul>
<li>Python 是 FLOSS（自由/开放源码软件）之一。</li>
<li>简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。</li>
<li>FLOSS 是基于一个团体分享知识的概念。这是为什么 Python 如此优秀的原因之一<ul>
<li>它是由一群希望看到一个更加优秀的 Python 的人创造并经常改进着的。</li>
</ul>
</li>
</ul>
<h2 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h2><ul>
<li>由于它的开源本质， Python 已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。</li>
<li>如果你小心地避免使用依赖于系统的特性，那么你的所有 Python 程序无需修改就可以在下述任何平台上面运行。这些平台包括 Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、AcomRISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE 甚至还有 Pocket-PC！</li>
</ul>
<h2 id="解释性"><a href="#解释性" class="headerlink" title="解释性"></a>解释性</h2><ul>
<li>一个用编译性语言比如 C 或 C++ 写的程序可以从源文件（即 C 或 C++ 语言）转换到一个你的计算机使用的语言（二进制代码，即 0 和 1）。</li>
<li>这个过程通过编译器和不同的标记、选项完成。</li>
<li>当你运行你的程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。</li>
<li>而 Python 语言写的程序不需要编译成二进制代码。你可以直接从源代码运行程序。</li>
<li>在计算机内部， Python 解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。</li>
<li>事实上，由于你不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用 Python 更加简单。</li>
<li>由于你只需要把你的 Python 程序拷贝到另外一台计算机上，它就可以工作了，这也使得你的 Python 程序更加易于移植。</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象　"></a>面向对象　</h2><ul>
<li>Python 即支持面向过程的编程也支持面向对象的编程。</li>
<li>在面向过程的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。</li>
<li>在面向对象的语言中，程序是由数据和功能组合而成的对象构建起来的。</li>
<li>与其他主要的语言如 C++ 和 Java 相比， Python 以一种非常强大又简单的方式实现面向对象编程。</li>
</ul>
<h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性　"></a>可扩展性　</h2><ul>
<li>如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用 C 或 C++ 编写，然后在你的 Python 程序中使用它们。</li>
</ul>
<h2 id="可嵌入性"><a href="#可嵌入性" class="headerlink" title="可嵌入性"></a>可嵌入性</h2><ul>
<li>你可以把 Python 嵌入你的 C/C++ 程序，从而向你的程序用户提供脚本功能。</li>
</ul>
<h2 id="丰富的库"><a href="#丰富的库" class="headerlink" title="丰富的库"></a>丰富的库</h2><ul>
<li>Python 标准库确实很庞大。</li>
<li>它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV 文件、密码系统、GUI（图形用户界面）、Tk 和其他与系统有关的操作。</li>
<li>只要安装了 Python ，所有这些功能都是可用的。这被称作 Python 的“功能齐全”理念。</li>
<li>除了标准库以外，还有许多其他高质量的库，如 wxPython 、Twisted 和 Python 图像库等。</li>
</ul>
<h1 id="Python-解释器"><a href="#Python-解释器" class="headerlink" title="Python 解释器"></a>Python 解释器</h1><ul>
<li>当我们编写 Python 代码时，我们得到的是一个包含 Python 代码的以 .py 为扩展名的文本文件。</li>
<li>要运行代码，就需要 Python 解释器去执行.py 文件。</li>
<li>由于整个 Python 语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写 Python 解释器来执行 Python 代码。</li>
<li>事实上，确实存在多种 Python 解释器。</li>
</ul>
<h2 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h2><ul>
<li>这个解释器是用 C 语言开发的，所以叫  CPython。</li>
<li>在命令行下运行 python 就是启动 CPython。</li>
<li>CPython 是使用最广的 Python 解释器。</li>
</ul>
<h2 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h2><ul>
<li>IPython 是基于 CPython 之上的一个交互式解释器，也就是说，IPython 只是在交互方式上有所增强，但是执行 Python 代码的功能和 CPython 是完全一样的。</li>
<li>好比很多国产浏览器虽然外观不同，但内核其实都是调用了 IE 内核 Trident。</li>
<li>CPython 用 &gt;&gt;&gt; 作为提示符，而 IPython 用 In [序号]: 作为提示符。</li>
</ul>
<h2 id="PyPy"><a href="#PyPy" class="headerlink" title="PyPy"></a>PyPy</h2><ul>
<li>PyPy 是另一个 Python 解释器，它的目标是执行速度。</li>
<li>PyPy 采用 JIT 技术，对 Python 代码进行动态编译，而不是解释，所以可以显著提高 Python 代码的执行速度。</li>
<li>绝大部分 Python 代码都可以在 PyPy 下运行，但是 PyPy 和 CPython 有一些是不同的，这就导致相同的 Python 代码在两种解释器下执行可能会有不同的结果。</li>
</ul>
<h2 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h2><ul>
<li>Jython 是运行在 Java 平台上的 Python 解释器，可以直接把 Python 代码编译成 Java 字节码执行。</li>
</ul>
<h2 id="IronPython"><a href="#IronPython" class="headerlink" title="IronPython"></a>IronPython</h2><ul>
<li>IronPython 和 Jython 类似，只不过 IronPython 是运行在微软 .Net 平台上的 Python 解释器，可以直接把 Python 代码编译成 .Net 的字节码。</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>Python 的解释器很多，但使用最广泛的还是 CPython。</li>
<li>如果要和 Java 或 .Net 平台交互，最好的办法不是用 Jython 或 IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</li>
</ul>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><ul>
<li><p>Python 解释器在加载 .py 文件中的代码时，会对文件内容进行编码，默认 ascill 编码</p>
</li>
<li><p>ASCII（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统</p>
<ul>
<li>主要用于显示现代英语和其他西欧语言，其最多只能用 8 位来表示（一个字节），即：2 ** 8 = 256 - 1，所以，ASCII 码最多只能表示 255 个符号。</li>
</ul>
</li>
<li><p>关于中文</p>
<ul>
<li>为了处理汉字，程序员设计了用于简体中文的 GB2312 和用于繁体中文的 big5。<ul>
<li>GB2312(1980 年) 一共收录了 7445 个 字符，包括 6763 个汉字和 682 个其它符号。</li>
<li>汉字区的内码范围高字节从 B0-F7 ，低字节从 A1-FE ，占用的码位是 72*94=6768。</li>
<li>其中有 5 个空位是 D7FA-D7FE。</li>
</ul>
</li>
<li>GB2312 支持的汉字太少<ul>
<li>1995 年的汉字扩展规范 GBK1.0 收录了 21886 个符号，它分为汉字区和图形符号区。汉字区包括 21003 个字符。</li>
<li>2000 年的 GB18030 是取代 GBK1.0 的正式国家标准。</li>
<li>该标准收录了 27484 个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。</li>
<li>现在的 PC 平台必须支持 GB18030，对嵌入式产品暂不作要求。</li>
<li>所以手机、MP3 一般只支持 GB2312。</li>
</ul>
</li>
<li>从 ASCII、GB2312、GBK 到 GB18030，这些编码方法是向下兼容的，即同一个字符在这些方案中总是有相同的编码，后面的标准支持更多的字符。</li>
<li>在这些编码中，英文和中文可以统一地处理。</li>
<li>区分中文编码的方法是高字节的最高位不为 0。</li>
<li>GB2312、GBK 到 GB18030 都属于双字节字符集 (DBCS)。</li>
<li>GB18030 是相对 GBK 增加的字符集，普通人是很难用到的，通常我们还是用 GBK 指代中文 Windows 编码。</li>
</ul>
</li>
</ul>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul>
<li>在 Python 中<ul>
<li>单行注释用    # 注释内容</li>
<li>多行注释用    ‘’’ 注释内容 ‘’’</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
