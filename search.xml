<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS 数据类型浅析之操作符、语句、函数</title>
    <url>/2021/10/26/JS%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B5%85%E6%9E%90%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E3%80%81%E8%AF%AD%E5%8F%A5%E3%80%81%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><ul>
<li>ECMA-262 描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等</li>
<li>ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象</li>
<li>在应用给对象时，操作符通常会调用 valueOf() 或 toString() 方法来取得可以计算的值</li>
</ul>
<p>​</p>
<h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h3 id="递增-递减操作符"><a href="#递增-递减操作符" class="headerlink" title="递增/递减操作符"></a>递增/递减操作符</h3><ul>
<li>操作数据值的规则<ul>
<li>对于字符串<ul>
<li>如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值</li>
<li>如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成数值</li>
</ul>
</li>
<li>对于布尔值<ul>
<li>如果是 false，则转换为 0 再应用改变。变量类型从布尔值变成数值</li>
<li>如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值</li>
</ul>
</li>
<li>对于浮点值，加 1 或减 1。</li>
<li>对于对象<ul>
<li>首先调用其 valueOf() 方法取得可以操作的值。对得到的值应用上述规则</li>
<li>如果是 NaN，则调用 toString() 并再次应用其他规则。变量类型从对象变成数值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">"2"</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">"z"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s1++; <span class="comment">// 值变成数值 3</span></span><br><span class="line">s2++; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b++; <span class="comment">// 值变成数值 1</span></span><br><span class="line">f--; <span class="comment">// 值变成 0.10000000000000009（因为浮点数不精确）</span></span><br><span class="line">o--; <span class="comment">// 值变成-2</span></span><br></pre></td></tr></table></figure>

<p>​</p>
<h3 id="一元加和减"><a href="#一元加和减" class="headerlink" title="一元加和减"></a>一元加和减</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">"01"</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">"1.1"</span>;</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">"z"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  valueOf() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">s1 = +s1; <span class="comment">// 值变成数值 1</span></span><br><span class="line">s2 = +s2; <span class="comment">// 值变成数值 1.1</span></span><br><span class="line">s3 = +s3; <span class="comment">// 值变成 NaN</span></span><br><span class="line">b = +b; <span class="comment">// 值变成数值 0</span></span><br><span class="line">f = +f; <span class="comment">// 不变，还是 1.1</span></span><br><span class="line">o = +o; <span class="comment">// 值变成数值-1</span></span><br></pre></td></tr></table></figure>

<p>​</p>
<h3 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h3><ul>
<li>ECMAScript 中的所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位，而是先把值转换为 32 位整数，再进行位操作，之后再把结果转换为 64 位，对开发者而言，就好像只有 32 位整数一样</li>
<li>有符号整数使用 32 位的前 31 位表示整数值。第 32 位表示数值的符号，如 0 表示正，1 表示负。这一位称为 <code>符号位（sign bit）</code>，它的值决定了数值其余部分的格式。</li>
<li>负值以一种称为 <code>二补数</code>（或 <code>补码</code>）的二进制编码存储。一个数值的二补数通过如下 3 个步骤计算得到：<ul>
<li>确定绝对值的二进制表示（如，对于 18，先确定 18 的二进制表示：10010）</li>
<li>找到数值的 <code>一补数</code>（或 <code>反码</code>），就是每个 0 都变成 1，每个 1 都变成 0</li>
<li>给结果加 1</li>
</ul>
</li>
<li>在把负值输出为一个二进制字符串时，我们会得到一个前面加了减号的绝对值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">-18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// "-10010"</span></span><br></pre></td></tr></table></figure>

<p>​</p>
<ul>
<li>按位非 ～<ul>
<li>它的作用是返回数值的一补数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">25</span>; <span class="comment">// 二进制 00000000000000000000000000011001</span></span><br><span class="line"><span class="keyword">let</span> num2 = ~num1; <span class="comment">// 二进制 11111111111111111111111111100110</span></span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// -26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于下面运算，但是位运算更快</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = -num1 - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num2); <span class="comment">// "-26"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>按位与 &amp;<ul>
<li>按位与操作在两个位都是 1 时返回 1，在任何一位是 0 时返回 0</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;</span><br><span class="line"><span class="number">11001</span>;</span><br><span class="line"><span class="number">00011</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="number">00001</span> == <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>​</p>
<ul>
<li>按位或 |<ul>
<li>按位或操作在至少一位是 1 时返回 1，两位都是 0 时返回 0</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> | <span class="number">3</span>;</span><br><span class="line"><span class="number">11001</span>;</span><br><span class="line"><span class="number">00011</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="number">11011</span> == <span class="number">27</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>按位异或 ^<ul>
<li>该操作两位相同是返回 0，不同时返回 1</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">25</span> ^ <span class="number">3</span>;</span><br><span class="line"><span class="number">11001</span>;</span><br><span class="line"><span class="number">00011</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="number">11010</span> == <span class="number">26</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>左移 &lt;&lt;<ul>
<li>该操作会按照指定的位数将数值的所有位向左移动</li>
<li>左移会保留它所操作数值的符号，-2 左移 5 位，将得到 -64</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldValue = <span class="number">2</span>; <span class="comment">// 等于二进制 10</span></span><br><span class="line"><span class="keyword">let</span> newValue = oldValue &lt;&lt; <span class="number">5</span>; <span class="comment">// 等于二进制 1000000，即十进制 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldValue = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">let</span> newValue = oldValue &lt;&lt; <span class="number">5</span>; <span class="comment">// 64</span></span><br></pre></td></tr></table></figure>

<p>​</p>
]]></content>
  </entry>
  <entry>
    <title>JS 数据类型浅析之 String、Symbol、Object</title>
    <url>/2021/10/24/JS%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B5%85%E6%9E%90%E4%B9%8B%20String%E3%80%81Symbol%E3%80%81Object/</url>
    <content><![CDATA[<h1 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h1><h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><ul>
<li><code>toString()</code> 方法可见于数值、布尔值、对象和字符串值，这个方法的唯一用途就是返回当前值的字符串等价物<ul>
<li>null 和 undefined 值没有 toString() 方法</li>
<li>数值调用这个方法时，可以传入一个 进制数 作为参数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// "10"  默认十进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// "1010"  2进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// "12"  8进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// "10" 10进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// "a"  16进制</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>String()</code> 转型函数，规则如下：<ul>
<li>如果值有 toString() 方法，则调用该方法（不传参数）并返回结果</li>
<li>如果值是 null，返回 “null”。</li>
<li>如果值是 undefined，返回 “undefined”。</li>
</ul>
</li>
</ul>
<h2 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h2><ul>
<li>ECMAScript 6 新增了使用模板字面量定义字符串的能力</li>
<li>与使用单引号或双引号不同，模板字面量保留换行字符，可以跨行定义字符串，且模板字符串支持嵌套无须转义</li>
<li>模板字面量最常用的一个特性是支持字符串插值，技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式，求值后得到字符串。</li>
<li>所有插入的值都会使用 toString() 强制转型为字符串，而且任何 JavaScript 表达式都可以用于插值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="string">`World`</span>&#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">toString</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"World"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;foo&#125;</span>!`</span>); <span class="comment">// Hello, World!</span></span><br></pre></td></tr></table></figure>

<h2 id="模板字面量标签函数"><a href="#模板字面量标签函数" class="headerlink" title="模板字面量标签函数"></a>模板字面量标签函数</h2><ul>
<li>模板字面量也支持定义标签函数（tag function），通过标签函数可以自定义插值行为。</li>
<li>标签函数会接收被插值记号分隔后的字符串数组和对每个表达式求值的结果</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, aValExpression, bValExpression, sumExpression</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(strings);</span><br><span class="line">  <span class="built_in">console</span>.log(aValExpression);</span><br><span class="line">  <span class="built_in">console</span>.log(bValExpression);</span><br><span class="line">  <span class="built_in">console</span>.log(sumExpression);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"foobar"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> untaggedResult = <span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a + b&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;a + b&#125;</span>`</span>;</span><br><span class="line"><span class="comment">// ["", " + ", " = ", "", raw: Array(4)]</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(untaggedResult); <span class="comment">// "6 + 9 = 15"</span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// "foobar"</span></span><br></pre></td></tr></table></figure>

<h2 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h2><ul>
<li>默认的 <code>String.raw</code> 标签函数可以直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unicode 示例</span></span><br><span class="line"><span class="comment">// \u00A9 是版权符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u00A9`</span>); <span class="comment">// ©</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\u00A9`</span>); <span class="comment">// \u00A9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 换行符示例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`first line\nsecond line`</span>);</span><br><span class="line"><span class="comment">// first line</span></span><br><span class="line"><span class="comment">// second line</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`first line\nsecond line`</span>); <span class="comment">// "first line\nsecond line"</span></span><br></pre></td></tr></table></figure>

<h1 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ul>
<li>Symbol（符号）是 ECMAScript 6 新增的数据类型</li>
<li>符号是原始值，且符号实例是唯一、不可变的</li>
<li>符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</li>
<li>调用 Symbol() 函数时，可以传入一个字符串参数作为对符号的描述（description），将来可以通过这个字符串来调试代码。字符串参数与符号定义或标识完全无关</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> genericSymbol = <span class="built_in">Symbol</span>(); <span class="comment">//  Symbol()</span></span><br><span class="line"><span class="keyword">let</span> otherGenericSymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fooSymbol = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>); <span class="comment">//  Symbol(foo)</span></span><br><span class="line"><span class="keyword">let</span> otherFooSymbol = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(genericSymbol == otherGenericSymbol); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(fooSymbol == otherFooSymbol); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Symbol() 函数不能与 new 关键字一起作为构造函数使用<ul>
<li>这样做是为了避免创建符号包装对象，如 Boolean、String 或 Number 那样，它们都支持构造函数且可用于初始化包含原始值的包装对象</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myBoolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myBoolean); <span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myString); <span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myNumber = <span class="keyword">new</span> <span class="built_in">Number</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myNumber); <span class="comment">// "object"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySymbol = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">// TypeError: Symbol is not a constructor</span></span><br></pre></td></tr></table></figure>

<ul>
<li>想要使用符号包装对象，也可以这样玩</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> myWrappedSymbol = <span class="built_in">Object</span>(mySymbol); <span class="comment">// Symbol &#123;Symbol()&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myWrappedSymbol); <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure>

<h2 id="全局符号注册表"><a href="#全局符号注册表" class="headerlink" title="全局符号注册表"></a>全局符号注册表</h2><ul>
<li>如果运行时的不同部分需要共享和重用 symbol 实例，那么可以用一个字符串作为键，通过 <code>Symbol.for()</code> 在全局符号注册表中创建并重用符号</li>
<li>Symbol.for() 对每个字符串键都执行幂等操作<ul>
<li>传入的字符串，该方法会查找全局运行时的注册表，若不存在对应的 symbol 实例则会创建一个新的 symbol 并返回，若已存在对应 symbol 实例则直接返回该实例</li>
</ul>
</li>
<li>即使采用相同的符号描述，在全局注册表中定义的符号跟使用 <code>Symbol()</code> 定义的符号也不相同</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fooGlobalSymbol); <span class="comment">// symbol</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>); <span class="comment">// 创建新符号</span></span><br><span class="line"><span class="keyword">let</span> otherFooGlobalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>); <span class="comment">// 重用已有符号</span></span><br><span class="line"><span class="built_in">console</span>.log(fooGlobalSymbol === otherFooGlobalSymbol); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> localSymbol = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">let</span> globalSymbol = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(localSymbol === globalSymbol); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Symbol.keyFor()</code> 方法接收符号，查询全局注册表，返回该全局符号对应的字符串键。<ul>
<li>如果查询的不是全局符号，则返回 undefined</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建全局符号</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s)); <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建普通符号</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"bar"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(s2)); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果传给 Symbol.keyFor()的不是符号，则该方法抛出 TypeError：</span></span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(<span class="number">123</span>); <span class="comment">// TypeError: 123 is not a symbol</span></span><br></pre></td></tr></table></figure>

<h2 id="使用符号作为属性"><a href="#使用符号作为属性" class="headerlink" title="使用符号作为属性"></a>使用符号作为属性</h2><ul>
<li>凡是可以使用字符串或数值作为属性的地方，都可以使用符号<ul>
<li>这就包括了 <code>对象字面量属性</code> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" target="_blank" rel="noopener">Object.defineProperties()</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty()</a> 定义的属性</li>
<li>对象字面量只能在计算属性语法中使用符号作为属性</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>),</span><br><span class="line">		s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>),</span><br><span class="line">		s3 = <span class="built_in">Symbol</span>(<span class="string">'baz'</span>),</span><br><span class="line">		s4 = <span class="built_in">Symbol</span>(<span class="string">'qux'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o[s1] = <span class="string">'foo val'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o);		<span class="comment">// &#123;Symbol(foo): foo val&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, s2, &#123;<span class="attr">value</span>: <span class="string">'bar val'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);		<span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(o, &#123;</span><br><span class="line"> [s3]: &#123;<span class="attr">value</span>: <span class="string">'baz val'</span>&#125;,</span><br><span class="line"> [s4]: &#123;<span class="attr">value</span>: <span class="string">'qux val'</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="comment">// &#123;Symbol(foo): foo val, Symbol(bar): bar val,</span></span><br><span class="line"><span class="comment">// Symbol(baz): baz val, Symbol(qux): qux val&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object.getOwnPropertyNames()</a> 返回对象实例的常规属性数组，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols" target="_blank" rel="noopener">Object.getOwnPropertySymbols()</a> 返回对象实例的符号属性数组<ul>
<li>这两个方法的返回值彼此互斥</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors" target="_blank" rel="noopener">Object.getOwnPropertyDescriptors()</a> 会返回同时包含常规和符号属性描述符的对象</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" target="_blank" rel="noopener">Reflect.ownKeys()</a> 会返回两种类型的键</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>),</span><br><span class="line">  s2 = <span class="built_in">Symbol</span>(<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  [s1]: <span class="string">"foo val"</span>,</span><br><span class="line">  [s2]: <span class="string">"bar val"</span>,</span><br><span class="line">  baz: <span class="string">"baz val"</span>,</span><br><span class="line">  qux: <span class="string">"qux val"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o)); <span class="comment">// [Symbol(foo), Symbol(bar)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o)); <span class="comment">// ["baz", "qux"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(o));</span><br><span class="line"><span class="comment">// &#123;baz: &#123;...&#125;, qux: &#123;...&#125;, Symbol(foo): &#123;...&#125;, Symbol(bar): &#123;...&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(o));</span><br><span class="line"><span class="comment">// ["baz", "qux", Symbol(foo), Symbol(bar)]</span></span><br></pre></td></tr></table></figure>

<h2 id="常用的内置符号"><a href="#常用的内置符号" class="headerlink" title="常用的内置符号"></a>常用的内置符号</h2><ul>
<li>ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为</li>
<li>内置符号都以 <code>Symbol 工厂函数</code> 字符串属性的形式存在，也就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。<ul>
<li>所有内置符号属性都是不可写、不可枚举、不可配置的</li>
</ul>
</li>
<li>这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为</li>
</ul>
<h3 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator" target="_blank" rel="noopener">Symbol.iterator</a></h3><ul>
<li>这个符号作为一个属性表示 “一个方法，该方法返回对象默认的迭代器。由 for-of 语句使用”。换句话说，这个符号表示实现迭代器 API 的函数。</li>
<li>for-of 循环时，会调用以 Symbol.iterator 为键的函数，并默认这个函数会返回一个实现迭代器 API 的对象，通常返回的对象是实现该 API<br>的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener">Generator</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// Generator &#123;&lt;suspended&gt;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line">    <span class="keyword">this</span>.max = max;</span><br><span class="line">    <span class="keyword">this</span>.idx = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.idx &lt; <span class="keyword">this</span>.max) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">this</span>.idx++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count();</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-asyncIterator"><a href="#Symbol-asyncIterator" class="headerlink" title="Symbol.asyncIterator"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator" target="_blank" rel="noopener">Symbol.asyncIterator</a></h3><ul>
<li>这个符号作为一个属性表示 “一个方法，该方法返回对象默认的 AsyncIterator。由 for-await-of 语句使用”。换句话说，这个符号表示实现异步迭代器 API 的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(max) &#123;</span><br><span class="line">    <span class="keyword">this</span>.max = max;</span><br><span class="line">    <span class="keyword">this</span>.asyncIdx = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> *[<span class="built_in">Symbol</span>.asyncIterator]() &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.asyncIdx &lt; <span class="keyword">this</span>.max) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="keyword">this</span>.asyncIdx++);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> emitter = <span class="keyword">new</span> Emitter(<span class="number">5</span>);</span><br><span class="line">  (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> x <span class="keyword">of</span> emitter) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncCount(); <span class="comment">// 估计大家都能猜到结果是串行打印的</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance" target="_blank" rel="noopener">Symbol.hasInstance</a></h3><ul>
<li>这个符号作为一个属性表示 “一个方法，该方法决定一个构造器对象是否认可一个对象是它的实例。由 instanceof 操作符使用”</li>
<li>instanceof 操作符可以用来确定一个对象实例的原型链上是否有原型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Foo); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以这样玩，在 instanceof 执行时，会调用以 Symbol.hasInstance 为键的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(Foo[<span class="built_in">Symbol</span>.hasInstance](f)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这个属性定义在 Function 的原型上，因此默认在所有函数和类上都可以调用。<ul>
<li>由于 instanceof 操作符会在原型链上寻找这个属性定义，就跟在原型链上寻找其他属性一样，因此可以在继承的类上通过静态方法重新定义这个函数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 不管是啥都返回 false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Baz();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Bar[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Baz[<span class="built_in">Symbol</span>.hasInstance](b)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable" target="_blank" rel="noopener">Symbol.isConcatSpreadable</a></h3><ul>
<li>这个符号作为一个属性表示 “一个布尔值，如果是 true，则意味着对象应该用 Array.prototype.concat() 打平其数组元素”</li>
<li>ES6 中的 Array.prototype.concat() 方法会根据接收到的对象的类型来选择，如何将一个 <code>类数组对象</code> 拼接成数组实例。覆盖 Symbol.isConcatSpreadable 的值可以修改这个行为<ul>
<li><code>数组对象</code> 默认情况下会被打平到 <code>已有的数组</code>，<code>false 或假值</code> 会导致 <code>整个对象</code> 被追加到 <code>数组末尾</code></li>
<li><code>类数组对象</code> 默认情况下会被追加到 <code>数组末尾</code>，<code>true 或真值</code> 会导致这个 <code>类数组对象</code> 被打平到 <code>数组实例</code></li>
<li>其他不是 <code>类数组对象</code> 的对象，如集合 Set，在 Symbol.isConcatSpreadable 被设置为 true 的情况下将被忽略</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> initial = [<span class="string">"foo"</span>];</span><br><span class="line"><span class="keyword">let</span> array = [<span class="string">"bar"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// 默认是 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// ['foo', 'bar']</span></span><br><span class="line"></span><br><span class="line">array[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(array)); <span class="comment">// ['foo', Array(1)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arrayLikeObject = &#123; <span class="attr">length</span>: <span class="number">1</span>, <span class="number">0</span>: <span class="string">"baz"</span> &#125;; <span class="comment">// 类数组对象</span></span><br><span class="line"><span class="built_in">console</span>.log(arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject));</span><br><span class="line"><span class="comment">// ['foo', &#123;...&#125;]  默认被整个添加到数组末尾</span></span><br><span class="line"></span><br><span class="line">arrayLikeObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(arrayLikeObject)); <span class="comment">// ['foo', 'baz']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> otherObject = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">"qux"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// ['foo', Set(1)]</span></span><br><span class="line"></span><br><span class="line">otherObject[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(initial.concat(otherObject)); <span class="comment">// ['foo']</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-match"><a href="#Symbol-match" class="headerlink" title="Symbol.match"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match" target="_blank" rel="noopener">Symbol.match</a></h3><ul>
<li>这个符号作为一个属性表示 “一个正则表达式方法，该方法用正则表达式去匹配字符串。由 String.prototype.match() 方法使用”</li>
<li>给 match 方法传入非正则表达式值会导致该值被转换为 RegExp 对象<ul>
<li>如果想改变这种行为，让方法直接使用参数，则可以重新定义 Symbol.match 函数以取代默认对正则表达式求值的行为，从而让<br>match() 方法使用非正则表达式实例</li>
<li>Symbol.match 函数接收一个参数，就是调用 match()方法的字符串实例</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooMatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.match](target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.includes(<span class="string">"foo"</span>); <span class="comment">// target 就是调用 match 方法的字符串实例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foobar"</span>.match(FooMatcher)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barbaz"</span>.match(FooMatcher)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringMatcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(str) &#123;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.match](target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.includes(<span class="keyword">this</span>.str); <span class="comment">// target 就是调用 match 方法的字符串实例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foobar"</span>.match(<span class="keyword">new</span> StringMatcher(<span class="string">"foo"</span>))); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barbaz"</span>.match(<span class="keyword">new</span> StringMatcher(<span class="string">"qux"</span>))); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-replace"><a href="#Symbol-replace" class="headerlink" title="Symbol.replace"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace" target="_blank" rel="noopener">Symbol.replace</a></h3><ul>
<li>这个符号作为一个属性表示 “一个正则表达式方法，该方法替换一个字符串中匹配的子串。由 String.prototype.replace() 方法使用”</li>
<li>给 replace() 方法传入非正则表达式值会导致该值被转换为 RegExp 对象<ul>
<li>如果想改变这种行为，让方法直接使用参数，可以重新定义 Symbol.replace 函数以取代默认对正则表达式求值的行为，从而让<br>replace() 方法使用非正则表达式实例</li>
<li>Symbol.replace 函数接收两个参数，即调用 replace() 方法的 <code>字符串实例</code> 和 <code>替换字符串</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooReplacer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.replace](target, replacement) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.split(<span class="string">"foo"</span>).join(replacement);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoobaz"</span>.replace(FooReplacer, <span class="string">"qux"</span>)); <span class="comment">// "barquxbaz"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringReplacer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(str) &#123;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.replace](target, replacement) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.split(<span class="keyword">this</span>.str).join(replacement);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoobaz"</span>.replace(<span class="keyword">new</span> StringReplacer(<span class="string">"foo"</span>), <span class="string">"qux"</span>));</span><br><span class="line"><span class="comment">// "barquxbaz"</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-search"><a href="#Symbol-search" class="headerlink" title="Symbol.search"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search" target="_blank" rel="noopener">Symbol.search</a></h3><ul>
<li>这个符号作为一个属性表示 “一个正则表达式方法，该方法返回字符串中匹配正则表达式的索引。由 String.prototype.search() 方法使用”</li>
<li>给 search() 方法传入非正则表达式值会导致该值被转换为 RegExp 对象<ul>
<li>如果想改变这种行为，让方法直接使用参数，可以重新定义 Symbol.search 函数以取代默认对正则表达式求值的行为，从而让<br>search() 方法使用非正则表达式实例</li>
<li>Symbol.search 函数接收一个参数，就是调用 search() 方法的字符串实例</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooSearcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.search](target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.indexOf(<span class="string">"foo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foobar"</span>.search(FooSearcher)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoo"</span>.search(FooSearcher)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barbaz"</span>.search(FooSearcher)); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringSearcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(str) &#123;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.search](target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.indexOf(<span class="keyword">this</span>.str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foobar"</span>.search(<span class="keyword">new</span> StringSearcher(<span class="string">"foo"</span>))); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoo"</span>.search(<span class="keyword">new</span> StringSearcher(<span class="string">"foo"</span>))); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barbaz"</span>.search(<span class="keyword">new</span> StringSearcher(<span class="string">"qux"</span>))); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species" target="_blank" rel="noopener">Symbol.species</a></h3><ul>
<li>这个符号作为一个属性表示 “一个函数值，该函数作为创建派生对象的构造函数”</li>
<li>用 Symbol.species 定义静态的获取器（getter）方法，可以覆盖新创建实例的原型定义</li>
<li>实例对象在运行过程中，需要再次调用自身的构造函数时，会调用该属性指定的构造函数。<ul>
<li>它主要的用途是，有些类库是在基类的基础上修改的，那么子类使用继承的方法时，作者可能希望返回基类的实例，而不是子类的实例</li>
<li><a href="https://es6.ruanyifeng.com/#docs/symbol#Symbol-species" target="_blank" rel="noopener">阮一峰的 ES6 有说到这个</a></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">bar = bar.concat(<span class="string">"bar"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(bar <span class="keyword">instanceof</span> Bar); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> baz = <span class="keyword">new</span> Baz();</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">baz = baz.concat(<span class="string">"baz"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(baz <span class="keyword">instanceof</span> Baz); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Promise</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">extends</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> [Symbol.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> T1(<span class="function">(<span class="params">r</span>) =&gt;</span> r()).then(<span class="function">(<span class="params">v</span>) =&gt;</span> v);</span><br><span class="line"><span class="built_in">console</span>.log(t1 <span class="keyword">instanceof</span> T1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(t1 <span class="keyword">instanceof</span> <span class="built_in">Promise</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t2 = <span class="keyword">new</span> T2(<span class="function">(<span class="params">r</span>) =&gt;</span> r()).then(<span class="function">(<span class="params">v</span>) =&gt;</span> v);</span><br><span class="line"><span class="built_in">console</span>.log(t2 <span class="keyword">instanceof</span> T2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(t2 <span class="keyword">instanceof</span> <span class="built_in">Promise</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-split"><a href="#Symbol-split" class="headerlink" title="Symbol.split"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split" target="_blank" rel="noopener">Symbol.split</a></h3><ul>
<li>这个符号作为一个属性表示 “一个正则表达式方法，该方法在匹配正则表达式的索引位置拆分字符串。由 String.prototype.split() 方法使用”</li>
<li>给 split() 传入非正则表达式值会导致该值被转换为 RegExp 对象<ul>
<li>如果想改变这种行为，让方法直接使用参数，可以重新定义 Symbol.split 函数以取代默认对正则表达式求值的行为，从而让 split() 方法使用非正则表达式实例</li>
<li>Symbol.split 函数接收一个参数，就是调用 split() 方法的字符串实例</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooSplitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.split](target) &#123;</span><br><span class="line">    <span class="comment">// target 就是调用 split 方法的字符串实例</span></span><br><span class="line">    <span class="keyword">return</span> target.split(<span class="string">"foo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoobaz"</span>.split(FooSplitter)); <span class="comment">// ["bar", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringSplitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(str) &#123;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="built_in">Symbol</span>.split](target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.split(<span class="keyword">this</span>.str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"barfoobaz"</span>.split(<span class="keyword">new</span> StringSplitter(<span class="string">"foo"</span>))); <span class="comment">// ["bar", "baz"]</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive" target="_blank" rel="noopener">Symbol.toPrimitive</a></h3><ul>
<li>这个符号作为一个属性表示 “一个方法，该方法将对象转换为相应的原始值。由 ToPrimitive 抽象操作使用”</li>
<li>很多内置操作都会尝试强制将对象转换为原始值，包括字符串、数值和未指定的原始类型</li>
<li>对于一个自定义对象实例，通过在这个实例的 Symbol.toPrimitive 属性上定义一个函数可以改变默认行为，该函数的参数为 “string”、”number” 或 “default”</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + foo); <span class="comment">// "3[object Object]"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - foo); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(foo)); <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>[<span class="built_in">Symbol</span>.toPrimitive] = <span class="function"><span class="keyword">function</span> (<span class="params">hint</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (hint) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"string bar"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"default"</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"default bar"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> + bar); <span class="comment">// "3default bar"		这里不是转换为字符串原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span> - bar); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(bar)); <span class="comment">// "string bar"</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noopener">Symbol.toStringTag</a></h3><ul>
<li>这个符号作为一个属性表示 “一个字符串，该字符串用于创建对象的默认字符串描述。由内置方法 Object.prototype.toString() 使用”</li>
<li>通过 toString() 方法获取对象标识时，会检索由 Symbol.toStringTag 指定的实例标识符，默认为 “Object”。<ul>
<li>内置类型已经指定了这个值，但自定义类实例还需要明确定义</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s); <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.toString()); <span class="comment">// [object Set]</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Set</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Foo &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.toString()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">"Bar"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> Bar();</span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// Bar &#123;Symbol(Symbol.toStringTag): 'Bar'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.toString()); <span class="comment">// [object Bar]</span></span><br><span class="line"><span class="built_in">console</span>.log(bar[<span class="built_in">Symbol</span>.toStringTag]); <span class="comment">// Bar</span></span><br></pre></td></tr></table></figure>

<h1 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h1><ul>
<li>ECMAScript 中的对象其实就是一组数据和功能的集合</li>
<li>ECMAScript 中的 Object 也是派生其他对象的基类</li>
<li>Object 类型的所有属性和方法在派生的对象上同样存在，每个 Object 实例都有如下属性和方法：<ul>
<li>constructor：用于创建当前对象的函数。这个属性的值就是 Object() 函数</li>
<li>hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属<br>性，要检查的属性名必须是字符串或符号</li>
<li>isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型</li>
<li>propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用 for-in 语句枚举，属性名必须是字符串</li>
<li>toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</li>
<li>toString()：返回对象的字符串表示</li>
<li>valueOf()：返回对象对应的字符串、数值或布尔值表示，通常与 toString() 的返回值相同</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript 语言基础</title>
    <url>/2021/10/24/JavaScript%20%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul>
<li>ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 等。</li>
<li>ECMAScript 中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。</li>
<li>标识符，就是变量、函数、属性或函数参数的名称。<ul>
<li>标识符可以由一或多个下列字符组成：第一个字符必须是一个字母、下划线（_）或美元符号（$），剩下的其他字符可以是字母、下划线、美元符号或数字，也可以是 ASCII（Extended ASCII）中的字母，或 Unicode 的字母字符。</li>
<li>关键字、保留字、true、false 和 null 不能作为标识符。</li>
</ul>
</li>
<li>ECMAScript 5 增加了严格模式（strict mode）的概念。<ul>
<li>严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</li>
<li>对整个脚本开启严格模式，需要在脚本开头加上 <code>&quot;use strict&quot;;</code></li>
<li>给单个函数指定在严格模式下执行，需要在函数体开头加上 <code>&quot;use strict&quot;;</code></li>
<li>在严格模式下，不能定义名为 eval 和 arguments 的变量，否则会导致语法错误。</li>
</ul>
</li>
</ul>
<p>​</p>
<h1 id="关键字-amp-保留字"><a href="#关键字-amp-保留字" class="headerlink" title="关键字 &amp; 保留字"></a>关键字 &amp; 保留字</h1><ul>
<li>关键字 和 保留字 都不能用作标识符或属性名</li>
<li>ECMA-262 第 6 版规定的所有关键字如下：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span>  <span class="keyword">do</span>  <span class="keyword">in</span>  <span class="keyword">typeof</span></span><br><span class="line"><span class="keyword">case</span>  <span class="keyword">else</span>  <span class="keyword">instanceof</span>  <span class="keyword">var</span></span><br><span class="line"><span class="keyword">catch</span>  <span class="keyword">export</span>  <span class="keyword">new</span>  <span class="keyword">void</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="keyword">extends</span>  <span class="title">return</span>  <span class="title">while</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>  <span class="title">finally</span>  <span class="title">super</span>  <span class="title">with</span></span></span><br><span class="line"><span class="class"><span class="title">continue</span>  <span class="title">for</span>  <span class="title">switch</span>  <span class="title">yield</span></span></span><br><span class="line"><span class="class"><span class="title">debugger</span>  <span class="title">function</span>  <span class="title">this</span></span></span><br><span class="line"><span class="class"><span class="title">default</span>  <span class="title">if</span>  <span class="title">throw</span></span></span><br><span class="line"><span class="class"><span class="title">delete</span>  <span class="title">import</span>  <span class="title">try</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>ECMA-262 第 6 版规定的保留字如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">始终保留:</span><br><span class="line">enum</span><br><span class="line"></span><br><span class="line">严格模式下保留:</span><br><span class="line">implements  package  public</span><br><span class="line">interface  protected  static</span><br><span class="line">let  private</span><br><span class="line"></span><br><span class="line">模块代码中保留:</span><br><span class="line">await</span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul>
<li>ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。</li>
<li>每个变量只不过是一个用于保存任意值的命名占位符。</li>
<li>有三个关键字用来声明变量，var 在 ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用。</li>
</ul>
<h2 id="var、let、const-异同点"><a href="#var、let、const-异同点" class="headerlink" title="var、let、const 异同点"></a>var、let、const 异同点</h2><ul>
<li>作用域<ul>
<li>let 与 const 声明的范围是 <code>块作用域</code>，而 var 声明的范围是 <code>函数作用域</code></li>
</ul>
</li>
<li>声明提升<ul>
<li>使用 var 声明的变量会自动提升到函数作用域顶部，而 let 与 const 声明的变量不会在作用域内被提升<ul>
<li>let 与 const 声明之前的执行瞬间被称为 “暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出 ReferenceError</li>
</ul>
</li>
<li>var 可以同一作用域内反复多次声明同一个变量，let 与 const 则不行</li>
</ul>
</li>
<li>全局声明<ul>
<li>var 在函数内声明的变量为局部变量，在函数内省略 var 操作符声明的变量 和 在函数外的全局范围声明的变量为全局变量</li>
<li>var 声明的全局变量会成为 window 对象的属性，而 let 与 const 则不会</li>
</ul>
</li>
<li>for 循环中的变量声明</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i 没有定义</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 5、5、5、5、5</span></span><br><span class="line"></span><br><span class="line">在退出循环时，迭代变量保存的是导致循环退出的值：<span class="number">5</span>。</span><br><span class="line">在之后执行setTimeout 的回调函数，所有的 i 都是同一个变量，因而输出的都是同一个最终值。</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line"> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会输出 0、1、2、3、4</span></span><br><span class="line">JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。</span><br><span class="line">每个 setTimeout 引用的都是不同的变量实例</span><br></pre></td></tr></table></figure>

<ul>
<li>const 声明的值类型数据是不可改的，但是用它声明一个引用类型的数据，如对象，修改其属性的值则是可以的</li>
</ul>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul>
<li>ECMAScript 有 6 种简单数据类型（也称为原始类型）：Undefined、Null、Boolean、Number、String 和 Symbol。<ul>
<li>Symbol（符号）是 ECMAScript 6 新增的。</li>
</ul>
</li>
<li>还有一种复杂数据类型叫 Object（对象）。<ul>
<li>Object 是一种无序键值对的集合。</li>
</ul>
</li>
<li>undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等。<ul>
<li>console.log(null == undefined); // true</li>
<li>永远不必显式地将变量值设置为 undefined，但只要变量将要保存对象，就应该用 null 来初始化变量，这样就可以保持 null 是空对象指针的语义，并进一步将其与 undefined 区分开来。</li>
</ul>
</li>
</ul>
<p>​</p>
<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><ul>
<li>因为 ECMAScript 的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。</li>
<li>typeof 会返回下列字符串：<ul>
<li>“undefined” 表示值未定义</li>
<li>“boolean” 表示值为布尔值</li>
<li>“string” 表示值为字符串</li>
<li>“number” 表示值为数值</li>
<li>“object” 表示值为对象（而不是函数）或 null<ul>
<li>特殊值 null 被认为是一个对空对象的引用</li>
</ul>
</li>
<li>“function” 表示值为函数<ul>
<li>函数在 ECMAScript 中被认为是对象，并不代表一种数据类型。但函数也有自己特殊的属性，所以有必要通过 typeof 操作符来区分函数和其他对象。</li>
</ul>
</li>
<li>“symbol” 表示值为 Symbol 类型</li>
</ul>
</li>
</ul>
<h2 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h2><ul>
<li>因为存储浮点值使用的内存空间是存储整数值的两倍，所以 ECMAScript 总是想方设法把值转换为整数。</li>
<li><code>0.1 + 0.2 !== 0.3</code> 之所以存在这种舍入错误，是因为使用了 <a href="https://baike.baidu.com/item/IEEE%20754/3869922" target="_blank" rel="noopener">IEEE 754</a> 格式数值，这种错误并非 ECMAScript 所独有，其他使用相同格式的语言也有这个问题。<ul>
<li>ECMAScript 可以表示的最小数值保存在 <code>Number.MIN_VALUE</code> 中，可以表示的最大数值保存在<code>Number.MAX_VALUE</code> 中</li>
<li>如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 <code>Infinity</code>（无穷）值</li>
<li>使用 <code>Number.NEGATIVE_INFINITY</code> 和 <code>Number.POSITIVE_INFINITY</code> 也可以获取正、负 Infinity。这两个属性包含的值分别就是 <code>-Infinity</code> 和 <code>Infinity</code></li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> / <span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> / <span class="number">-0</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure>

<ul>
<li>要确定一个值是不是有限大,可以使用 <code>isFinite()</code> 函数</li>
<li><code>NaN</code> 是一个特殊的数值<ul>
<li>0、+0 或 -0 相除会返回 NaN</li>
<li>任何涉及 NaN 的操作始终返回 NaN</li>
<li>判断一个数据是否为数字类型可以使用 <code>isNaN()</code>，任何不能转换为数值的值都会导致这个函数返回 true</li>
<li>isNaN() 可以用于测试对象，首先会调用对象的 valueOf()方法，然后再确定返回的值是否可以转换为数值。如果不能，再调用 toString()方法，并测试其返回值。且这通常是 ECMAScript 内置函数和操作符的工作方式</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> / <span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-0</span> / +<span class="number">0</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h3><ul>
<li>有 3 个函数可以将非数值转换为数值：Number()、parseInt() 和 parseFloat()。Number() 是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。</li>
<li>Number() 函数转换对象时，调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf" target="_blank" rel="noopener">valueOf()</a> 方法转换返回的值，如果转换结果是 NaN，则调用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noopener">toString()</a> 方法，再按照转换字符串的规则转换。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">Number</span>(<span class="string">"Hello world!"</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">Number</span>(<span class="string">""</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">Number</span>(<span class="string">"000011"</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">Number</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>parseInt() 函数更专注于字符串是否包含数值模式。<ul>
<li>字符串最前面的空格会被忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，parseInt()立即返回 NaN。否则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。</li>
<li>parseInt() 也接收第二个参数，用于指定底数（进制数）。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>); <span class="comment">// 10，解释为十六进制整数</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>); <span class="comment">// 70，解释为十进制值</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"0xf"</span>); <span class="comment">// 15，解释为十六进制整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">parseInt</span>(<span class="string">"0xAF"</span>, <span class="number">16</span>); <span class="comment">// 175</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>); <span class="comment">// 175</span></span><br></pre></td></tr></table></figure>

<ul>
<li>parseFloat() 函数的工作方式跟 parseInt() 函数类似，都是从位置 0 开始检测每个字符，也是解析到字符串末尾或者解析到一个无效的浮点数值字符为止。<ul>
<li>但是 parseFloat() 始终忽略字符串开头的零，因此它只解析十进制值，且不能指定进制数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>); <span class="comment">// 1234，按整数解析</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>); <span class="comment">// 22.5</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>); <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">"0908.5"</span>); <span class="comment">// 908.5</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>); <span class="comment">// 31250000</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>HTML 中的 JavaScript</title>
    <url>/2021/10/24/HTML%20%E4%B8%AD%E7%9A%84%20JavaScript/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>在 JavaScript 发展早起早期，网景公司的工作人员希望在将 JavaScript 引入 HTML 页面的同时，不会导致页面在其他浏览器中渲染出问题。</li>
<li>经过讨论，他们达成了向网页中引入通用脚本能力的共识，并且形成了后来的 HTML 规范。</li>
</ul>
<h1 id="script-标签"><a href="#script-标签" class="headerlink" title="script 标签"></a>script 标签</h1><ul>
<li>将 JavaScript 插入 HTML 的主要方法是使用 script 元素。<ul>
<li>这个元素是由网景公司创造出来，并最早在 Netscape Navigator 2 中实现的。后来，这个元素被正式加入到 HTML 规范。</li>
</ul>
</li>
<li>script 元素属性：<ul>
<li>src：可选。表示包含要执行的代码的外部文件。</li>
<li>type：可选。代替 language 属性，表示代码块中脚本语言的内容类型（也称 MIME 类型）。<ul>
<li>JavaScript 文件的 MIME 类型通常是 “application/x-javascript”，不过给 type 属性这个值有可能导致脚本被忽略。</li>
<li>在非 IE 的浏览器中有效的其他值还有 “application/javascript” 和 “application/ecmascript”。</li>
<li>如果这个值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字。</li>
</ul>
</li>
<li>defer：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。<ul>
<li>只对外部脚本文件有效。</li>
<li>设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。</li>
</ul>
</li>
<li>async：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。<ul>
<li>只对外部脚本文件有效。</li>
<li>从改变脚本处理方式上看，async 属性与 defer 类似，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。</li>
<li>不过，与 defer 不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执行。</li>
<li>添加 async 属性的目的是告诉浏览器，不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行后再加载其他脚本。正因为如此，异步脚本不应该在加载期间修改 DOM。</li>
</ul>
</li>
<li>integrity：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI， Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错， 脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。</li>
<li>charset：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。</li>
<li>crossorigin：可选。配置相关请求的 CORS（跨源资源共享）设置。默认不使用 CORS。<ul>
<li>crossorigin = “anonymous” 配置文件请求不必设置凭据标志。</li>
<li>crossorigin = “use-credentials” 设置凭据标志，意味着出站请求会包含凭据。</li>
</ul>
</li>
</ul>
</li>
<li>使用 script 的方式有两种：<ul>
<li>通过它直接在网页中嵌入 JavaScript 代码</li>
<li>通过它在网页中引入外部 JavaScript 文件</li>
<li>包含在 script 内的代码会被从上到下解释执行，在 script 元素中的代码被计算完成之前，页面的其余内容不会被加载，也不会被显示</li>
<li>与解释行内 JavaScript 一样，通过 src 属性引入外部 JavaScript 文件并进行解释时，页面也会阻塞，阻塞时间也包含下载文件的时间</li>
</ul>
</li>
<li>按照惯例，外部 JavaScript 文件的扩展名是 <code>.js</code><ul>
<li>但这不是必需的，因为浏览器不会检查所包含 JavaScript 文件的扩展名。</li>
<li>这就为使用服务器端脚本语言动态生成 JavaScript 代码，或者在浏览器中将 JavaScript 扩展语言（如 TypeScript，或 React 的 JSX）转译为 JavaScript 提供了可能性。</li>
<li>不过要注意，服务器经常会根据文件扩展来确定响应的正确 MIME 类型。如果不打算使用.js 扩展名，一定要确保服务器能返回正确的 MIME 类型。</li>
</ul>
</li>
<li>除了 script 标签，还有其他方式可以加载脚本。<ul>
<li>只要创建一个 script 元素，设置其 src 属性，并将其添加到 DOM 即可。</li>
<li>默认情况下，以这种方式创建的 script 元素是以异步方式加载外部 js 文件的，相当于添加了 async 属性。但是可以设置其为同步加载：<code>script.async = false;</code></li>
<li>以这种方式获取的资源对浏览器预加载器是不可见的，这会严重影响它们在资源获取队列中的优先级。且这种方式可能会严重影响性能。要想让预加载器知道这些动态请求文件的存在，可以在文档头部显式声明它们：<code>&lt;link rel=&quot;preload&quot; href=&quot;gibberish.js&quot;&gt;</code></li>
</ul>
</li>
</ul>
<h1 id="行内代码与外部文件"><a href="#行内代码与外部文件" class="headerlink" title="行内代码与外部文件"></a>行内代码与外部文件</h1><ul>
<li>虽然可以直接在 HTML 文件中嵌入 JavaScript 代码，但通常认为最佳实践是尽可能将 JavaScript 代码放在外部文件中。不过这个最佳实践并不是明确的强制性规则。推荐使用外部文件的理由如下。<ul>
<li>可维护性。JavaScript 代码如果分散到很多 HTML 页面，会导致维护困难。而用一个目录保存所有 JavaScript 文件，则更容易维护。</li>
<li>缓存。浏览器会根据特定的设置缓存所有外部链接的 JavaScript 文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次。这最终意味着页面加载更快。</li>
<li>适应未来。</li>
</ul>
</li>
</ul>
<h1 id="noscript-元素"><a href="#noscript-元素" class="headerlink" title="noscript 元素"></a>noscript 元素</h1><ul>
<li>针对早期浏览器不支持 JavaScript 的问题，需要一个页面优雅降级的处理方案。最终，noscript 元素出现，被用于给不支持或者禁用 JavaScript 的浏览器提供替代内容。</li>
<li>noscript 元素可以包含任何可以出现在 body 中的 HTML 元素，script 元素除外。在满足下列两种情况的任意一种时，浏览器将显示包含在 noscript 中的内容：<ul>
<li>浏览器不支持脚本；</li>
<li>浏览器对脚本的支持被关闭。</li>
</ul>
</li>
<li>例子如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example HTML Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This page requires a JavaScript-enabled browser.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</li>
<li>所有 script 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在 script 元素中的代码必须严格按次序解释。</li>
<li>对不推迟执行的脚本，浏览器必须解释完位于 script 元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把 script 元素放到页面末尾，介于主内容之后及 body 标签之前。</li>
<li>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。根据浏览器内核不同，实际执行情况可能有所不同。</li>
<li>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。</li>
<li>通过使用 noscript 元素，可以指定在浏览器不支持或者禁用脚本时显示的内容。如果浏览器支持并启用脚本，则 noscript 元素中的任何内容都不会被渲染。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>什么是 JavaScript</title>
    <url>/2021/10/24/%E4%BB%80%E4%B9%88%E6%98%AF%20JavaScript/</url>
    <content><![CDATA[<h1 id="历史回顾"><a href="#历史回顾" class="headerlink" title="历史回顾"></a>历史回顾</h1><ul>
<li>早些年，随着 Web 应用日趋复杂，为验证简单的表单而需要大量与服务器的往返通信成为用户的痛点，因此开发者对客户端脚本语言的需求也越来越强烈。</li>
<li>1995 年，网景公司一位名叫 Brendan Eich 的工程师，开发了一个叫 Mocha（后来改名为 LiveScript）的脚本语言，随后网景与 Sun 公司结为开发联盟，共同完善 LiveScript 的开发。在大名鼎鼎的 Netscape Navigator 2 正式发布前，为了搭上媒体当时热烈炒作 Java 的顺风车，网景把 LiveScript 改名为 JavaScript。</li>
<li>1996 年 8 月，微软重磅进入 Web 浏览器领域。在 Netscape Navigator 3 发布后不久，微软发布了 IE3，其中包含自己名为 JScript 的 JavaScript 实现。然而这导致 JavaScript 还没有规范的语法、特性及标准的问题更加突出。</li>
<li>1997 年，网景的 JavaScript 1.1 作为提案被提交给欧洲计算机制造商协会（Ecma）。第 39 技术委员会（TC39）承担了 “标准化一门通用、跨平台、厂商中立的脚本语言的语法和语义” 的任务。TC39 委员会花了数月时间打造出 ECMA-262，也就是 ECMAScript（发音为“ek-ma-script”）这个新的脚本语言标准。</li>
<li>1998 年，国际标准化组织（ISO）和国际电工委员会（IEC）也将 ECMAScript 采纳为标准（ISO/ IEC-16262）。</li>
<li>自此以后，各家浏览器均以 ECMAScript 作为自己 JavaScript 实现的依据，虽然具体实现各有不同。</li>
</ul>
<h1 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h1><ul>
<li>虽然 JavaScript 和 ECMAScript 基本上是同义词，但 JavaScript 远远不限于 ECMA-262 所定义的那样。它包含以下三部分：<ul>
<li>核心（ECMAScript）</li>
<li>文档对象模型（DOM）</li>
<li>浏览器对象模型（BOM）</li>
</ul>
</li>
</ul>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><ul>
<li>ECMAScript，即 ECMA-262 定义的语言，并不局限于 Web 浏览器。</li>
<li>ECMA-262 将这门语言作为一个基准来定义，以便在它之上再构建更稳健的脚本语言。</li>
<li>Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境<ul>
<li>宿主环境提供 ECMAScript 的基准实现和与环境自身交互必需的扩展。</li>
<li>扩展（比如 DOM）使用 ECMAScript 核心类型和语法，提供特定于环境的额外功能。</li>
<li>其他宿主环境还有服务器端 JavaScript 平台 Node.js 和即将被淘汰的 Adobe Flash。</li>
</ul>
</li>
<li>ECMA-262 在基本的层面，它描述这门语言的如下部分：语法、类型、语句、关键字、保留字、操作符、全局对象。</li>
<li>ECMAScript 只是对实现这个规范描述的所有方面的一门语言的称呼<ul>
<li>JavaScript 实现了 ECMAScript，而 Adobe ActionScript 同样也实现了 ECMAScript。</li>
</ul>
</li>
</ul>
<h3 id="ECMAScript-版本"><a href="#ECMAScript-版本" class="headerlink" title="ECMAScript 版本"></a>ECMAScript 版本</h3><ul>
<li>ECMA-262 的第 1 版本质上跟网景的 JavaScript 1.1 相同， 只不过删除了所有浏览器特定的代码，外加少量细微的修改。</li>
<li>ECMA-262 第 6 版，俗称 ES6、ES2015 或 ES Harmony（和谐版），于 2015 年 6 月发布。<ul>
<li>这一版包含了大概这个规范有史以来最重要的一批增强特性。</li>
<li>ES6 正式支持了类、模块、迭代器、生成器、箭头 函数、期约、反射、代理和众多新的数据类型。</li>
</ul>
</li>
<li>当然还有其他版本，此处不做过多描述。</li>
</ul>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul>
<li>文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使 用扩展的 XML。</li>
<li>DOM 将整个页面抽象为一组分层节点。</li>
<li>HTML 或 XML 页面的每个组成部分都是一种 节点，包含不同的数据。</li>
<li>DOM 通过创建表示文档的树，让开发者可以随心所欲地控制网页的内容和结构。使用 DOM API，可以轻松地删除、添加、替换、修改节点。</li>
<li>DOM 并非只能通过 JavaScript 访问，而且确实被其他很多语言实现了。<ul>
<li>不过对于浏览器来说，DOM 就是使用 ECMAScript 实现的，如今已经成为 JavaScript 语言的一大组成部分。</li>
</ul>
</li>
<li>为了防止网景和微软各行其是，导致开发者面向浏览器开发网页的情况发生，万维网联盟（W3C，World Wide Web Consortium）开始了制定 DOM 标准的进程。</li>
</ul>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><ul>
<li>IE3 和 Netscape Navigator 3 提供了浏览器对象模型（BOM） API，用于支持访问和操作浏览器的窗口。</li>
<li>使用 BOM，开发者可以操控浏览器显示页面之外的部分，主要提供了操作浏览器窗口和子窗口的相关 API。</li>
<li>因为在很长时间内 BOM 都没有标准，所以每个浏览器实现的都是拥有自身特性的 BOM。</li>
<li>HTML5 改变了这个局面，这个版本的 HTML 以正式规范的形式涵盖了尽可能多的 BOM 特性，未来 BOM 的实现细节应该会日趋一致。</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分<ul>
<li>ECMAScript：由 ECMA-262 定义并提供核心功能</li>
<li>文档对象模型（DOM）：提供与网页内容交互的方法和接口</li>
<li>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口</li>
</ul>
</li>
<li>JavaScript 的这三个部分得到了各浏览器厂商不同程度的支持，所有浏览器基本上对 ES5（ECMAScript 5）提供了完善的支持，对 ES6（ECMAScript 6）及以后版本的支持度也在不断提升</li>
</ul>
]]></content>
  </entry>
</search>
